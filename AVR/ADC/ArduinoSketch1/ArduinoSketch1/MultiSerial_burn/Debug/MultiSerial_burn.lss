
MultiSerial_burn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080012a  0080012a  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007064  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001607  00000000  00000000  00007a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000141c  00000000  00000000  0000907f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  0000a49c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e11  00000000  00000000  0000ab84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002546  00000000  00000000  0000c995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000eedb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_18>
  4c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	0a 02       	muls	r16, r26

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e6 e9       	ldi	r30, 0x96	; 150
  7e:	f6 e0       	ldi	r31, 0x06	; 6
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	aa 32       	cpi	r26, 0x2A	; 42
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	aa e2       	ldi	r26, 0x2A	; 42
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a0 3d       	cpi	r26, 0xD0	; 208
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 43 03 	call	0x686	; 0x686 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 38 02 	call	0x470	; 0x470 <main>
  b6:	0c 94 49 03 	jmp	0x692	; 0x692 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	8a e2       	ldi	r24, 0x2A	; 42
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0c 94 43 01 	jmp	0x286	; 0x286 <_ZN14HardwareSerial5beginEmh>

000000d0 <loop>:
  Serial.begin(9600);
}

void loop() {
  
    Serial.println("PRINTING");
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	71 e0       	ldi	r23, 0x01	; 1
  d4:	8a e2       	ldi	r24, 0x2A	; 42
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0c 94 8a 02 	jmp	0x514	; 0x514 <_ZN5Print7printlnEPKc>

000000dc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
  dc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
  de:	91 8d       	ldd	r25, Z+25	; 0x19
  e0:	22 8d       	ldd	r18, Z+26	; 0x1a
  e2:	89 2f       	mov	r24, r25
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	80 5c       	subi	r24, 0xC0	; 192
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	82 1b       	sub	r24, r18
  ec:	91 09       	sbc	r25, r1
}
  ee:	8f 73       	andi	r24, 0x3F	; 63
  f0:	99 27       	eor	r25, r25
  f2:	08 95       	ret

000000f4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  f4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
  f6:	91 8d       	ldd	r25, Z+25	; 0x19
  f8:	82 8d       	ldd	r24, Z+26	; 0x1a
  fa:	98 17       	cp	r25, r24
  fc:	31 f0       	breq	.+12     	; 0x10a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
  fe:	82 8d       	ldd	r24, Z+26	; 0x1a
 100:	e8 0f       	add	r30, r24
 102:	f1 1d       	adc	r31, r1
 104:	85 8d       	ldd	r24, Z+29	; 0x1d
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 10e:	08 95       	ret

00000110 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 110:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 112:	91 8d       	ldd	r25, Z+25	; 0x19
 114:	82 8d       	ldd	r24, Z+26	; 0x1a
 116:	98 17       	cp	r25, r24
 118:	61 f0       	breq	.+24     	; 0x132 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 11a:	82 8d       	ldd	r24, Z+26	; 0x1a
 11c:	df 01       	movw	r26, r30
 11e:	a8 0f       	add	r26, r24
 120:	b1 1d       	adc	r27, r1
 122:	5d 96       	adiw	r26, 0x1d	; 29
 124:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 126:	92 8d       	ldd	r25, Z+26	; 0x1a
 128:	9f 5f       	subi	r25, 0xFF	; 255
 12a:	9f 73       	andi	r25, 0x3F	; 63
 12c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 136:	08 95       	ret

00000138 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 138:	fc 01       	movw	r30, r24
 13a:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 13c:	44 8d       	ldd	r20, Z+28	; 0x1c
 13e:	25 2f       	mov	r18, r21
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	84 2f       	mov	r24, r20
 144:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 146:	82 1b       	sub	r24, r18
 148:	93 0b       	sbc	r25, r19
 14a:	54 17       	cp	r21, r20
 14c:	10 f0       	brcs	.+4      	; 0x152 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 14e:	cf 96       	adiw	r24, 0x3f	; 63
 150:	08 95       	ret
  return tail - head - 1;
 152:	01 97       	sbiw	r24, 0x01	; 1
}
 154:	08 95       	ret

00000156 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	89 2b       	or	r24, r25
 15c:	49 f0       	breq	.+18     	; 0x170 <_Z14serialEventRunv+0x1a>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	89 2b       	or	r24, r25
 164:	29 f0       	breq	.+10     	; 0x170 <_Z14serialEventRunv+0x1a>
 166:	0e 94 00 02 	call	0x400	; 0x400 <_Z17Serial0_availablev>
 16a:	81 11       	cpse	r24, r1
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 170:	08 95       	ret

00000172 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 172:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 174:	84 8d       	ldd	r24, Z+28	; 0x1c
 176:	df 01       	movw	r26, r30
 178:	a8 0f       	add	r26, r24
 17a:	b1 1d       	adc	r27, r1
 17c:	a3 5a       	subi	r26, 0xA3	; 163
 17e:	bf 4f       	sbci	r27, 0xFF	; 255
 180:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 182:	84 8d       	ldd	r24, Z+28	; 0x1c
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	8f 73       	andi	r24, 0x3F	; 63
 18a:	99 27       	eor	r25, r25
 18c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 18e:	a6 89       	ldd	r26, Z+22	; 0x16
 190:	b7 89       	ldd	r27, Z+23	; 0x17
 192:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 194:	a0 89       	ldd	r26, Z+16	; 0x10
 196:	b1 89       	ldd	r27, Z+17	; 0x11
 198:	8c 91       	ld	r24, X
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 19e:	93 8d       	ldd	r25, Z+27	; 0x1b
 1a0:	84 8d       	ldd	r24, Z+28	; 0x1c
 1a2:	98 13       	cpse	r25, r24
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1a6:	02 88       	ldd	r0, Z+18	; 0x12
 1a8:	f3 89       	ldd	r31, Z+19	; 0x13
 1aa:	e0 2d       	mov	r30, r0
 1ac:	80 81       	ld	r24, Z
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ec 01       	movw	r28, r24
  _written = true;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1ca:	98 13       	cpse	r25, r24
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <_ZN14HardwareSerial5writeEh+0x24>
 1ce:	e8 89       	ldd	r30, Y+16	; 0x10
 1d0:	f9 89       	ldd	r31, Y+17	; 0x11
 1d2:	80 81       	ld	r24, Z
 1d4:	85 fd       	sbrc	r24, 5
 1d6:	24 c0       	rjmp	.+72     	; 0x220 <_ZN14HardwareSerial5writeEh+0x6c>
 1d8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 1da:	0b 8d       	ldd	r16, Y+27	; 0x1b
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	0f 5f       	subi	r16, 0xFF	; 255
 1e0:	1f 4f       	sbci	r17, 0xFF	; 255
 1e2:	0f 73       	andi	r16, 0x3F	; 63
 1e4:	11 27       	eor	r17, r17
 1e6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 1e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1ea:	e8 12       	cpse	r14, r24
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	07 fc       	sbrc	r0, 7
 1f2:	fa cf       	rjmp	.-12     	; 0x1e8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 1f4:	e8 89       	ldd	r30, Y+16	; 0x10
 1f6:	f9 89       	ldd	r31, Y+17	; 0x11
 1f8:	80 81       	ld	r24, Z
 1fa:	85 ff       	sbrs	r24, 5
 1fc:	f5 cf       	rjmp	.-22     	; 0x1e8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 204:	f1 cf       	rjmp	.-30     	; 0x1e8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 206:	8b 8d       	ldd	r24, Y+27	; 0x1b
 208:	fe 01       	movw	r30, r28
 20a:	e8 0f       	add	r30, r24
 20c:	f1 1d       	adc	r31, r1
 20e:	e3 5a       	subi	r30, 0xA3	; 163
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 214:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 216:	ea 89       	ldd	r30, Y+18	; 0x12
 218:	fb 89       	ldd	r31, Y+19	; 0x13
 21a:	80 81       	ld	r24, Z
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	07 c0       	rjmp	.+14     	; 0x22e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 220:	ee 89       	ldd	r30, Y+22	; 0x16
 222:	ff 89       	ldd	r31, Y+23	; 0x17
 224:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 226:	e8 89       	ldd	r30, Y+16	; 0x10
 228:	f9 89       	ldd	r31, Y+17	; 0x11
 22a:	80 81       	ld	r24, Z
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 248:	88 8d       	ldd	r24, Y+24	; 0x18
 24a:	88 23       	and	r24, r24
 24c:	c9 f0       	breq	.+50     	; 0x280 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 24e:	ea 89       	ldd	r30, Y+18	; 0x12
 250:	fb 89       	ldd	r31, Y+19	; 0x13
 252:	80 81       	ld	r24, Z
 254:	85 fd       	sbrc	r24, 5
 256:	05 c0       	rjmp	.+10     	; 0x262 <_ZN14HardwareSerial5flushEv+0x20>
 258:	a8 89       	ldd	r26, Y+16	; 0x10
 25a:	b9 89       	ldd	r27, Y+17	; 0x11
 25c:	8c 91       	ld	r24, X
 25e:	86 fd       	sbrc	r24, 6
 260:	0f c0       	rjmp	.+30     	; 0x280 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	07 fc       	sbrc	r0, 7
 266:	f5 cf       	rjmp	.-22     	; 0x252 <_ZN14HardwareSerial5flushEv+0x10>
 268:	80 81       	ld	r24, Z
 26a:	85 ff       	sbrs	r24, 5
 26c:	f2 cf       	rjmp	.-28     	; 0x252 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 26e:	a8 89       	ldd	r26, Y+16	; 0x10
 270:	b9 89       	ldd	r27, Y+17	; 0x11
 272:	8c 91       	ld	r24, X
 274:	85 ff       	sbrs	r24, 5
 276:	ed cf       	rjmp	.-38     	; 0x252 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 278:	ce 01       	movw	r24, r28
 27a:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 27e:	e7 cf       	rjmp	.-50     	; 0x24e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 286:	cf 92       	push	r12
 288:	df 92       	push	r13
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
 296:	6a 01       	movw	r12, r20
 298:	7b 01       	movw	r14, r22
 29a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 29c:	e8 89       	ldd	r30, Y+16	; 0x10
 29e:	f9 89       	ldd	r31, Y+17	; 0x11
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2a4:	41 15       	cp	r20, r1
 2a6:	51 4e       	sbci	r21, 0xE1	; 225
 2a8:	61 05       	cpc	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	b1 f0       	breq	.+44     	; 0x2da <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	79 e0       	ldi	r23, 0x09	; 9
 2b2:	8d e3       	ldi	r24, 0x3D	; 61
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a7 01       	movw	r20, r14
 2b8:	96 01       	movw	r18, r12
 2ba:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 2be:	da 01       	movw	r26, r20
 2c0:	c9 01       	movw	r24, r18
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	a1 09       	sbc	r26, r1
 2c6:	b1 09       	sbc	r27, r1
 2c8:	b6 95       	lsr	r27
 2ca:	a7 95       	ror	r26
 2cc:	97 95       	ror	r25
 2ce:	87 95       	ror	r24
 2d0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2d2:	21 15       	cp	r18, r1
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	38 07       	cpc	r19, r24
 2d8:	a8 f0       	brcs	.+42     	; 0x304 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 2da:	e8 89       	ldd	r30, Y+16	; 0x10
 2dc:	f9 89       	ldd	r31, Y+17	; 0x11
 2de:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 2e0:	60 e8       	ldi	r22, 0x80	; 128
 2e2:	74 e8       	ldi	r23, 0x84	; 132
 2e4:	8e e1       	ldi	r24, 0x1E	; 30
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	a7 01       	movw	r20, r14
 2ea:	96 01       	movw	r18, r12
 2ec:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 2f0:	da 01       	movw	r26, r20
 2f2:	c9 01       	movw	r24, r18
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	a1 09       	sbc	r26, r1
 2f8:	b1 09       	sbc	r27, r1
 2fa:	b6 95       	lsr	r27
 2fc:	a7 95       	ror	r26
 2fe:	97 95       	ror	r25
 300:	87 95       	ror	r24
 302:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 304:	ec 85       	ldd	r30, Y+12	; 0x0c
 306:	fd 85       	ldd	r31, Y+13	; 0x0d
 308:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 30a:	ee 85       	ldd	r30, Y+14	; 0x0e
 30c:	ff 85       	ldd	r31, Y+15	; 0x0f
 30e:	20 83       	st	Z, r18

  _written = false;
 310:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 312:	ec 89       	ldd	r30, Y+20	; 0x14
 314:	fd 89       	ldd	r31, Y+21	; 0x15
 316:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 318:	ea 89       	ldd	r30, Y+18	; 0x12
 31a:	fb 89       	ldd	r31, Y+19	; 0x13
 31c:	80 81       	ld	r24, Z
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 322:	ea 89       	ldd	r30, Y+18	; 0x12
 324:	fb 89       	ldd	r31, Y+19	; 0x13
 326:	80 81       	ld	r24, Z
 328:	88 60       	ori	r24, 0x08	; 8
 32a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 32c:	ea 89       	ldd	r30, Y+18	; 0x12
 32e:	fb 89       	ldd	r31, Y+19	; 0x13
 330:	80 81       	ld	r24, Z
 332:	80 68       	ori	r24, 0x80	; 128
 334:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 336:	ea 89       	ldd	r30, Y+18	; 0x12
 338:	fb 89       	ldd	r31, Y+19	; 0x13
 33a:	80 81       	ld	r24, Z
 33c:	8f 7d       	andi	r24, 0xDF	; 223
 33e:	80 83       	st	Z, r24
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	08 95       	ret

00000350 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 364:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end+0x10>
 368:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x11>
 36c:	80 81       	ld	r24, Z
 36e:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__data_end+0x16>
 372:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__data_end+0x17>
 376:	82 fd       	sbrc	r24, 2
 378:	12 c0       	rjmp	.+36     	; 0x39e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 37a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 37c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__data_end+0x19>
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 384:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__data_end+0x1a>
 388:	82 17       	cp	r24, r18
 38a:	51 f0       	breq	.+20     	; 0x3a0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 38c:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <__data_end+0x19>
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	e6 5d       	subi	r30, 0xD6	; 214
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 398:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__data_end+0x19>
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 39e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 3d6:	8a e2       	ldi	r24, 0x2A	; 42
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 400:	8a e2       	ldi	r24, 0x2A	; 42
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN14HardwareSerial9availableEv>
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	89 2b       	or	r24, r25
 40c:	09 f4       	brne	.+2      	; 0x410 <_Z17Serial0_availablev+0x10>
 40e:	20 e0       	ldi	r18, 0x00	; 0
}
 410:	82 2f       	mov	r24, r18
 412:	08 95       	ret

00000414 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 414:	ea e2       	ldi	r30, 0x2A	; 42
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	13 82       	std	Z+3, r1	; 0x03
 41a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 41c:	88 ee       	ldi	r24, 0xE8	; 232
 41e:	93 e0       	ldi	r25, 0x03	; 3
 420:	a0 e0       	ldi	r26, 0x00	; 0
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	84 83       	std	Z+4, r24	; 0x04
 426:	95 83       	std	Z+5, r25	; 0x05
 428:	a6 83       	std	Z+6, r26	; 0x06
 42a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 42c:	8d e0       	ldi	r24, 0x0D	; 13
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	91 83       	std	Z+1, r25	; 0x01
 432:	80 83       	st	Z, r24
 434:	85 ec       	ldi	r24, 0xC5	; 197
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	95 87       	std	Z+13, r25	; 0x0d
 43a:	84 87       	std	Z+12, r24	; 0x0c
 43c:	84 ec       	ldi	r24, 0xC4	; 196
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	97 87       	std	Z+15, r25	; 0x0f
 442:	86 87       	std	Z+14, r24	; 0x0e
 444:	80 ec       	ldi	r24, 0xC0	; 192
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	91 8b       	std	Z+17, r25	; 0x11
 44a:	80 8b       	std	Z+16, r24	; 0x10
 44c:	81 ec       	ldi	r24, 0xC1	; 193
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	93 8b       	std	Z+19, r25	; 0x13
 452:	82 8b       	std	Z+18, r24	; 0x12
 454:	82 ec       	ldi	r24, 0xC2	; 194
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	95 8b       	std	Z+21, r25	; 0x15
 45a:	84 8b       	std	Z+20, r24	; 0x14
 45c:	86 ec       	ldi	r24, 0xC6	; 198
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	97 8b       	std	Z+23, r25	; 0x17
 462:	86 8b       	std	Z+22, r24	; 0x16
 464:	11 8e       	std	Z+25, r1	; 0x19
 466:	12 8e       	std	Z+26, r1	; 0x1a
 468:	13 8e       	std	Z+27, r1	; 0x1b
 46a:	14 8e       	std	Z+28, r1	; 0x1c
 46c:	08 95       	ret

0000046e <initVariant>:
 46e:	08 95       	ret

00000470 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 470:	0e 94 e6 02 	call	0x5cc	; 0x5cc <init>

	initVariant();
 474:	0e 94 37 02 	call	0x46e	; 0x46e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 478:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 47c:	cb ea       	ldi	r28, 0xAB	; 171
 47e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 480:	0e 94 68 00 	call	0xd0	; 0xd0 <loop>
		if (serialEventRun) serialEventRun();
 484:	20 97       	sbiw	r28, 0x00	; 0
 486:	e1 f3       	breq	.-8      	; 0x480 <main+0x10>
 488:	0e 94 ab 00 	call	0x156	; 0x156 <_Z14serialEventRunv>
 48c:	f9 cf       	rjmp	.-14     	; 0x480 <main+0x10>

0000048e <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 48e:	cf 92       	push	r12
 490:	df 92       	push	r13
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	6c 01       	movw	r12, r24
 4a0:	7a 01       	movw	r14, r20
 4a2:	8b 01       	movw	r16, r22
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
 4a8:	ce 15       	cp	r28, r14
 4aa:	df 05       	cpc	r29, r15
 4ac:	81 f0       	breq	.+32     	; 0x4ce <_ZN5Print5writeEPKhj+0x40>
 4ae:	d8 01       	movw	r26, r16
 4b0:	6d 91       	ld	r22, X+
 4b2:	8d 01       	movw	r16, r26
 4b4:	d6 01       	movw	r26, r12
 4b6:	ed 91       	ld	r30, X+
 4b8:	fc 91       	ld	r31, X
 4ba:	01 90       	ld	r0, Z+
 4bc:	f0 81       	ld	r31, Z
 4be:	e0 2d       	mov	r30, r0
 4c0:	c6 01       	movw	r24, r12
 4c2:	09 95       	icall
 4c4:	89 2b       	or	r24, r25
 4c6:	11 f0       	breq	.+4      	; 0x4cc <_ZN5Print5writeEPKhj+0x3e>
 4c8:	21 96       	adiw	r28, 0x01	; 1
 4ca:	ee cf       	rjmp	.-36     	; 0x4a8 <_ZN5Print5writeEPKhj+0x1a>
 4cc:	7e 01       	movw	r14, r28
 4ce:	c7 01       	movw	r24, r14
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	df 90       	pop	r13
 4de:	cf 90       	pop	r12
 4e0:	08 95       	ret

000004e2 <_ZN5Print5writeEPKc>:
 4e2:	61 15       	cp	r22, r1
 4e4:	71 05       	cpc	r23, r1
 4e6:	79 f0       	breq	.+30     	; 0x506 <_ZN5Print5writeEPKc+0x24>
 4e8:	fb 01       	movw	r30, r22
 4ea:	01 90       	ld	r0, Z+
 4ec:	00 20       	and	r0, r0
 4ee:	e9 f7       	brne	.-6      	; 0x4ea <_ZN5Print5writeEPKc+0x8>
 4f0:	31 97       	sbiw	r30, 0x01	; 1
 4f2:	af 01       	movw	r20, r30
 4f4:	46 1b       	sub	r20, r22
 4f6:	57 0b       	sbc	r21, r23
 4f8:	dc 01       	movw	r26, r24
 4fa:	ed 91       	ld	r30, X+
 4fc:	fc 91       	ld	r31, X
 4fe:	02 80       	ldd	r0, Z+2	; 0x02
 500:	f3 81       	ldd	r31, Z+3	; 0x03
 502:	e0 2d       	mov	r30, r0
 504:	09 94       	ijmp
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	08 95       	ret

0000050c <_ZN5Print7printlnEv>:
 50c:	6b e1       	ldi	r22, 0x1B	; 27
 50e:	71 e0       	ldi	r23, 0x01	; 1
 510:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_ZN5Print5writeEPKc>

00000514 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 51e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_ZN5Print5writeEPKc>
 522:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 524:	ce 01       	movw	r24, r28
 526:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN5Print7printlnEv>
  return n;
}
 52a:	80 0f       	add	r24, r16
 52c:	91 1f       	adc	r25, r17
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	08 95       	ret

00000538 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <timer0_millis>
 552:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <timer0_millis+0x1>
 556:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <timer0_millis+0x2>
 55a:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <timer0_millis+0x3>
 55e:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <timer0_fract>
 562:	23 e0       	ldi	r18, 0x03	; 3
 564:	23 0f       	add	r18, r19
 566:	2d 37       	cpi	r18, 0x7D	; 125
 568:	20 f4       	brcc	.+8      	; 0x572 <__vector_16+0x3a>
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	a1 1d       	adc	r26, r1
 56e:	b1 1d       	adc	r27, r1
 570:	05 c0       	rjmp	.+10     	; 0x57c <__vector_16+0x44>
 572:	26 e8       	ldi	r18, 0x86	; 134
 574:	23 0f       	add	r18, r19
 576:	02 96       	adiw	r24, 0x02	; 2
 578:	a1 1d       	adc	r26, r1
 57a:	b1 1d       	adc	r27, r1
 57c:	20 93 c7 01 	sts	0x01C7, r18	; 0x8001c7 <timer0_fract>
 580:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <timer0_millis>
 584:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <timer0_millis+0x1>
 588:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <timer0_millis+0x2>
 58c:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <timer0_millis+0x3>
 590:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <timer0_overflow_count>
 594:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <timer0_overflow_count+0x1>
 598:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <timer0_overflow_count+0x2>
 59c:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <timer0_overflow_count+0x3>
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	a1 1d       	adc	r26, r1
 5a4:	b1 1d       	adc	r27, r1
 5a6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <timer0_overflow_count>
 5aa:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <timer0_overflow_count+0x1>
 5ae:	a0 93 ce 01 	sts	0x01CE, r26	; 0x8001ce <timer0_overflow_count+0x2>
 5b2:	b0 93 cf 01 	sts	0x01CF, r27	; 0x8001cf <timer0_overflow_count+0x3>
 5b6:	bf 91       	pop	r27
 5b8:	af 91       	pop	r26
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 5cc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 5ce:	84 b5       	in	r24, 0x24	; 36
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 5d4:	84 b5       	in	r24, 0x24	; 36
 5d6:	81 60       	ori	r24, 0x01	; 1
 5d8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5da:	85 b5       	in	r24, 0x25	; 37
 5dc:	82 60       	ori	r24, 0x02	; 2
 5de:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 5e0:	85 b5       	in	r24, 0x25	; 37
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 5e6:	ee e6       	ldi	r30, 0x6E	; 110
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 5f0:	e1 e8       	ldi	r30, 0x81	; 129
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 5f6:	80 81       	ld	r24, Z
 5f8:	82 60       	ori	r24, 0x02	; 2
 5fa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 5fc:	80 81       	ld	r24, Z
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 602:	e0 e8       	ldi	r30, 0x80	; 128
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 60c:	e1 eb       	ldi	r30, 0xB1	; 177
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	84 60       	ori	r24, 0x04	; 4
 614:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 616:	e0 eb       	ldi	r30, 0xB0	; 176
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	81 60       	ori	r24, 0x01	; 1
 61e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 620:	ea e7       	ldi	r30, 0x7A	; 122
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	84 60       	ori	r24, 0x04	; 4
 628:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 62a:	80 81       	ld	r24, Z
 62c:	82 60       	ori	r24, 0x02	; 2
 62e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 630:	80 81       	ld	r24, Z
 632:	81 60       	ori	r24, 0x01	; 1
 634:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 636:	80 81       	ld	r24, Z
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 63c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 640:	08 95       	ret

00000642 <__udivmodsi4>:
 642:	a1 e2       	ldi	r26, 0x21	; 33
 644:	1a 2e       	mov	r1, r26
 646:	aa 1b       	sub	r26, r26
 648:	bb 1b       	sub	r27, r27
 64a:	fd 01       	movw	r30, r26
 64c:	0d c0       	rjmp	.+26     	; 0x668 <__udivmodsi4_ep>

0000064e <__udivmodsi4_loop>:
 64e:	aa 1f       	adc	r26, r26
 650:	bb 1f       	adc	r27, r27
 652:	ee 1f       	adc	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	a2 17       	cp	r26, r18
 658:	b3 07       	cpc	r27, r19
 65a:	e4 07       	cpc	r30, r20
 65c:	f5 07       	cpc	r31, r21
 65e:	20 f0       	brcs	.+8      	; 0x668 <__udivmodsi4_ep>
 660:	a2 1b       	sub	r26, r18
 662:	b3 0b       	sbc	r27, r19
 664:	e4 0b       	sbc	r30, r20
 666:	f5 0b       	sbc	r31, r21

00000668 <__udivmodsi4_ep>:
 668:	66 1f       	adc	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	1a 94       	dec	r1
 672:	69 f7       	brne	.-38     	; 0x64e <__udivmodsi4_loop>
 674:	60 95       	com	r22
 676:	70 95       	com	r23
 678:	80 95       	com	r24
 67a:	90 95       	com	r25
 67c:	9b 01       	movw	r18, r22
 67e:	ac 01       	movw	r20, r24
 680:	bd 01       	movw	r22, r26
 682:	cf 01       	movw	r24, r30
 684:	08 95       	ret

00000686 <__tablejump2__>:
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	05 90       	lpm	r0, Z+
 68c:	f4 91       	lpm	r31, Z
 68e:	e0 2d       	mov	r30, r0
 690:	09 94       	ijmp

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
